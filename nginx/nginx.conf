# Configuración de eventos - Controla cómo NGINX maneja las conexiones
events {
# Número máximo de conexiones simultáneas que cada worker_process puede manejar
# Para desarrollo, 1024 es suficiente. En producción, podría aumentarse según necesidades
    worker_connections 1024;
}
# Configuración principal de HTTP
http {
# Define un grupo de servidores para balance de carga
# En este caso, solo tenemos un servidor API de NestJS
    upstream nestjs_app {
# La dirección usa el nombre del servicio definido en docker-compose
# El puerto 3000 es el puerto interno de la aplicación NestJS
        server nestjs:3000;
# Si tuviéramos múltiples instancias de la API, podríamos agregarlas aquí:
# server api2:3000;
# server api3:3000;
    }
# Configuración del servidor NGINX
    server {
# Puerto en el que NGINX escuchará las peticiones
        listen 80;
# Nombre del servidor - en desarrollo usamos localhost
# En producción, aquí iría tu dominio
        server_name localhost;
# Configuración para todos los endpoints que comienzan con /
        location / {
# Redirige todas las peticiones al grupo de servidores definido arriba
            proxy_pass http://nestjs_app;
# Configuración para el proxy HTTP
            proxy_http_version 1.1;
# Configuración para WebSockets
# Necesario si tu aplicación usa WebSockets o Socket.io
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
# Pasa el hostname original al servidor backend
            proxy_set_header Host $host;
# Previene el cacheo de las respuestas
            proxy_cache_bypass $http_upgrade;
        }
    }
}